/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
#ifndef NES_COORDINATOR_INCLUDE_REQUESTPROCESSOR_REQUESTTYPES_SUBREQUESTFUTURE_HPP_
#define NES_COORDINATOR_INCLUDE_REQUESTPROCESSOR_REQUESTTYPES_SUBREQUESTFUTURE_HPP_
#include <any>
#include <future>
#include <memory>

namespace NES::RequestProcessor {
class AbstractSubRequest;
using AbstractSubRequestPtr = std::shared_ptr<AbstractSubRequest>;

/**
 * @brief This class contains a future and a pointer to a sub request object. It's interface ensures that the
 * execution of the sub request has started or finished before any thread will wait on the future. This prevents
 * deadlocks in single threaded execution.
 */
class SubRequestFuture {
  public:
    /**
     * @brief Constructor
     * @param request the request which needs to be executed for the wrapped future to contain a value
     * @param future the future which will contain the result generated by the request
     */
    explicit SubRequestFuture(AbstractSubRequestPtr request, std::future<std::any> future);

    /**
     * @brief If the contained request is not being executed yet, execute it and then obtain the result from the future.
     * If the request was already executed or is currently being executed by another thread, wait on the future and
     * return its result once the other thread sets the corresponding promise
     * @return the result generated by the request.
     */
    std::any get();

  private:
    AbstractSubRequestPtr request;
    std::future<std::any> future;
};
}// namespace NES::RequestProcessor
#endif// NES_COORDINATOR_INCLUDE_REQUESTPROCESSOR_REQUESTTYPES_SUBREQUESTFUTURE_HPP_
