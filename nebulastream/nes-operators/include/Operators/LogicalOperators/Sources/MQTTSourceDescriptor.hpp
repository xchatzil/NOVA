/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#ifndef NES_OPERATORS_INCLUDE_OPERATORS_LOGICALOPERATORS_SOURCES_MQTTSOURCEDESCRIPTOR_HPP_
#define NES_OPERATORS_INCLUDE_OPERATORS_LOGICALOPERATORS_SOURCES_MQTTSOURCEDESCRIPTOR_HPP_

#ifdef ENABLE_MQTT_BUILD

#include <Configurations/Worker/PhysicalSourceTypes/MQTTSourceType.hpp>
#include <Operators/LogicalOperators/Sources/SourceDescriptor.hpp>

namespace NES {

/**
 * @brief Descriptor defining properties used for creating physical mqtt source
 */
class MQTTSourceDescriptor : public SourceDescriptor {

  public:
    enum class ServiceQualities : uint8_t {
        atMostOnce,
        atLeastOnce,
        exactlyOnce
    };//cleanSession requires atLeastOnce or exactlyOnce
    /**
   * @brief create a source descriptor pointer for MQTT source
   * @param schema the schema of the data
   * @param sourceConfig all needed physicalSources for MQTT passed with object
   * @return source descriptor pointer to mqtt source
   */
    static SourceDescriptorPtr create(SchemaPtr schema, MQTTSourceTypePtr sourceConfig);

    /**
     * @brief get MQTT server address
     * @return serverAddress
     */
    MQTTSourceTypePtr getSourceConfigPtr() const;

    /**
     * checks if two mqtt source descriptors are the same
     * @param other
     * @return true if they are the same
     */
    [[nodiscard]] bool equal(SourceDescriptorPtr const& other) const override;

    std::string toString() const override;

    SourceDescriptorPtr copy() override;

  private:
    /**
     * @brief mqtt source descriptor constructor
     * @param schema the schema of the data
     * @param mqttSourceType all needed physicalSources for MQTT passed with object
     * @param inputFormat format in which a tuple is interpreted/generated by the source
     */
    explicit MQTTSourceDescriptor(SchemaPtr schema, MQTTSourceTypePtr mqttSourceType);

    MQTTSourceTypePtr mqttSourceType;
};

using MQTTSourceDescriptorPtr = std::shared_ptr<MQTTSourceDescriptor>;

}// namespace NES

#endif
#endif// NES_OPERATORS_INCLUDE_OPERATORS_LOGICALOPERATORS_SOURCES_MQTTSOURCEDESCRIPTOR_HPP_
