/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
#ifndef NES_COMPILER_INCLUDE_COMPILER_SOURCECODE_HPP_
#define NES_COMPILER_INCLUDE_COMPILER_SOURCECODE_HPP_
#include <string>

namespace NES::Compiler {

/**
 * @brief An enum for representing the target programming language of a `SourceCode` object.
 */
enum class Language {
    CPP,
};

/**
 * @brief Returns the language of this source code.
 * @return Language
 */
inline std::string getLanguageAsString(Language language) {
    switch (language) {
        case Language::CPP: return "CPP";
        default: return "unknown";
    }
}

/**
 * @brief Represents a source code artifact.
 * Usually generated by a code generator.
 */
class SourceCode {
  public:
    /**
     * Overload == operator
     * @param rhs
     * @return
     */
    bool operator==(const SourceCode& rhs) const;

    /**
     * Overload =! operator
     * @param rhs
     * @return
     */
    bool operator!=(const SourceCode& rhs) const;

    /**
     * @brief Constructor to create a new source code artifact.
     * @param language the language of this source code artifact.
     * @param code the code
     */
    SourceCode(Language language, std::string code);

    /**
     * @brief Returns the language of this source code.
     * @return Language
     */
    [[nodiscard]] const Language& getLanguage() const;

    /**
     * @brief Returns the code.
     * @return std::string
     */
    [[nodiscard]] const std::string& getCode() const;

  private:
    const std::string code;
    const Language language;
};

}// namespace NES::Compiler

namespace std {

template<>
struct hash<const NES::Compiler::SourceCode> {
    std::size_t operator()(const NES::Compiler::SourceCode& k) const {
        using std::hash;
        using std::size_t;
        using std::string;

        // Compute individual hash values for first,
        // second and third and combine them using XOR
        // and bit shifting:

        return ((hash<string>()(k.getCode()) ^ (hash<string>()(NES::Compiler::getLanguageAsString(k.getLanguage())) << 1)) >> 1);
    }
};

}// namespace std

#endif// NES_COMPILER_INCLUDE_COMPILER_SOURCECODE_HPP_
