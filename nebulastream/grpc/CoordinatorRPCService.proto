/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "WorkerLocation.proto";

// The greeting service definition.
service CoordinatorRPCService {
  // Sends a registration request for new worker to the coordinator
  rpc RegisterWorker (RegisterWorkerRequest) returns (RegisterWorkerReply) {}

  // Sends a unregistration request for a worker to the coordinator
  rpc UnregisterWorker (UnregisterWorkerRequest) returns (UnregisterWorkerReply) {}

  // Sends a registration request for a collection of physical sources to the coordinator
  rpc RegisterPhysicalSource (RegisterPhysicalSourcesRequest) returns (RegisterPhysicalSourcesReply) {}

  // Sends a unregistration request for a physical source to the coordinator
  rpc UnregisterPhysicalSource (UnregisterPhysicalSourceRequest) returns (UnregisterPhysicalSourceReply) {}

  // Sends a registration request for a logical source
  rpc RegisterLogicalSource (RegisterLogicalSourceRequest) returns (RegisterLogicalSourceReply) {}

  // Sends a unregistration request for a logical source
  rpc UnregisterLogicalSource (UnregisterLogicalSourceRequest) returns (UnregisterLogicalSourceReply) {}

  // Sends an add new parent request for to the coordinator
  rpc AddParent (AddParentRequest) returns (AddParentReply) {}

  // Sends a remove parent request to the coordinator
  rpc RemoveParent (RemoveParentRequest) returns (RemoveParentReply) {}

  // sends a replace parent request to the coordinator
  rpc ReplaceParent (ReplaceParentRequest) returns (ReplaceParentReply) {}

  // sends a toology node relocation request to the coordinator
  rpc RelocateTopologyNode (NodeRelocationRequest) returns (NodeRelocationReply) {}

  // get a list of a nodes parents
  rpc GetParents (GetParentsRequest) returns (GetParentsReply) {}

  // queries for all field nodes within a specified radius around the supplied coordinates
  rpc GetNodesInRange (GetNodesInRangeRequest) returns (GetNodesInRangeReply) {}

  //inform the coordinator about the scheduled reconnect
  rpc SendScheduledReconnect (SendScheduledReconnectRequest) returns (SendScheduledReconnectReply) {}

  //lets a mobile device inform the coordinator about its current location
  rpc SendLocationUpdate (LocationUpdateRequest) returns (LocationUpdateReply) {}

  // send a notification when a query fails to the coordinator
  rpc NotifyQueryFailure (QueryFailureNotification) returns (QueryFailureNotificationReply) {}

  rpc NotifyEpochTermination (EpochBarrierPropagationNotification) returns (EpochBarrierPropagationReply) {}

  // send errors to the coordinator
  rpc SendErrors (SendErrorsMessage) returns (ErrorReply) {}

  rpc RequestSoftStop (RequestSoftStopMessage) returns (StopRequestReply) {}

  rpc notifySourceStopTriggered (SoftStopTriggeredMessage) returns (SoftStopTriggeredReply) {}

  rpc NotifySoftStopCompleted (SoftStopCompletionMessage) returns (SoftStopCompletionReply) {}
}

message SerializedOpenCLDeviceInfo {
  uint32 deviceId = 1;
  string platformVendor = 2;
  string platformName = 3;
  string deviceName = 4;
  bool doubleFPSupport = 5;
  repeated uint32 maxWorkItems = 6;
  uint32 deviceAddressBits = 7;
  string deviceType = 8;
  string deviceExtensions = 9;
  uint32 availableProcessors = 10;
  uint64 globalMemory = 11;
}

message RegisterWorkerRequest {
  string address = 1;
  uint32 grpcPort = 2;
  uint32 dataPort = 3;
  uint32 numberOfSlots = 4;
  uint32 bandwidthInMbps = 5;
  uint32 latencyInMs = 6;
  SerializableRegistrationMetrics registrationMetrics = 7;
  NES.Spatial.Protobuf.Waypoint waypoint = 8;
  NES.Spatial.Protobuf.SpatialType spatialType = 9;
  bool tfSupported = 10;
  bool javaUDFSupported = 11;
  uint64 workerId = 12;
  repeated SerializedOpenCLDeviceInfo openCLDevices = 13;
}

message RegisterWorkerReply {
  uint64 workerId = 1;
}

message UnregisterWorkerRequest {
  uint64 workerId = 1;
}

message UnregisterWorkerReply {
  bool success = 1;
}

message RegisterPhysicalSourcesRequest {
  uint64 workerId = 1;
  repeated PhysicalSourceDefinition physicalSourceTypes = 2;
}

message PhysicalSourceDefinition {
  string sourceType = 1;
  string physicalSourceName = 2;
  string logicalSourceName = 3;
}


message PhysicalSourceRegistrationResult {
  string physicalSourceName = 1;
  bool success = 3;
  string reason = 2;
}

message RegisterPhysicalSourcesReply {
    bool success = 1;
    repeated PhysicalSourceRegistrationResult results = 2;
}

message UnregisterPhysicalSourceRequest {
  uint64 workerId = 1;
  string physicalSourceName = 2;
  string logicalSourceName = 3;
}

message UnregisterPhysicalSourceReply {
  bool success = 1;
}

message RegisterLogicalSourceRequest {
  uint64 workerId = 1;
  string logicalSourceName = 2;
  string sourceSchema = 3;
}

message RegisterLogicalSourceReply {
  bool success = 1;
}

message UnregisterLogicalSourceRequest {
  uint64 workerId = 1;
  string logicalSourceName = 2;
}

message UnregisterLogicalSourceReply {
  bool success = 1;
}

message AddParentRequest {
  uint64 childId = 1;
  uint64 parentId = 2;
}

message AddParentReply {
  bool success = 1;
}

message ReplaceParentRequest {
  uint64 childId = 1;
  uint64 oldParent = 2;
  uint64 newParent = 3;
}

message ReplaceParentReply {
  bool success = 1;
}

message RemoveParentRequest {
  uint64 childId = 1;
  uint64  parentId = 2;
}

message RemoveParentReply {
  bool success = 1;
}

message GetNodesInRangeRequest {
  NES.Spatial.Protobuf.GeoLocation geoLocation = 1;
  double radius = 2;
}

message QueryFailureNotification{
  uint64 queryId = 1;
  uint64 subQueryId = 2;
  uint64 workerId = 3;
  uint64 operatorId = 4;
  string errorMsg = 5;
}

message QueryFailureNotificationReply{
  bool success = 1;
}

message EpochBarrierPropagationNotification{
  uint64 timestamp = 1;
  uint64 queryId = 2;
}

message EpochBarrierPropagationReply{
  bool success = 1;
}
message GetNodesInRangeReply{
  repeated NES.Spatial.Protobuf.WorkerLocationInfo nodes = 1;
}

message SendScheduledReconnectRequest {
  uint64 deviceId = 1;
  repeated NES.Spatial.Protobuf.SerializableReconnectPoint addReconnects = 2;
  repeated NES.Spatial.Protobuf.SerializableReconnectPoint removeReconnects = 3;
}

message SendScheduledReconnectReply {
  bool success = 1;
}

message LocationUpdateRequest {
  uint64 workerId = 1;
  NES.Spatial.Protobuf.Waypoint waypoint = 2;
}

message LocationUpdateReply {
  bool success = 1;
}

message SerializableRegistrationMetrics{
  uint64 totalMemoryBytes = 1;
  uint32 cpuCoreNum = 2;
  uint64 totalCPUJiffies = 3;
  int64 cpuPeriodUS = 4;
  int64 cpuQuotaUS = 5;
  bool isMoving = 6;
  bool hasBattery = 7;
}

message SendErrorsMessage{
  uint64 workerId = 1;
  string errorMsg = 2;
}

message ErrorReply{
  bool success = 1;
}

message RequestSoftStopMessage{
  uint64 queryId = 1;
  uint64 subQueryId = 2;
  uint64 sourceId = 3;
}

message StopRequestReply{
  bool success = 1;
}

message SoftStopTriggeredMessage{
  uint64 queryId = 1;
  uint64 querySubPlanId = 2;
  uint64 sourceId = 3;
}

message SoftStopTriggeredReply{
  bool success = 1;
}

message SoftStopCompletionMessage{
  uint64 queryId = 1;
  uint64 querySubPlanId = 2;
}

message SoftStopCompletionReply{
  bool success = 1;
}

message GetParentsRequest{
  uint64 nodeId = 1;
}

message GetParentsReply {
  repeated uint64 parentIds = 1;
}

message NodeRelocationRequest {
  repeated TopologyLink removedLinks = 1;
  repeated TopologyLink addedLinks = 2;
}

message NodeRelocationReply {
  bool success = 1;
}

message TopologyLink {
  uint64 upstream = 1;
  uint64 downstream = 2;
}
